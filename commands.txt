$ dir
$ mkdir test
$ touch index.html
$ touch styles.css
$ touch commands.txt
$ cp index.html index_2.html
$ mkdir destination
$ mv index_2.html ../destination/index_2.html
$ cd .
$ cd ..
rm styles.css
$ mv --help
rm -rf destination

git init					creates repository
git add .					adds all new files
	git add index.html			adds a specific listed file
git commit -m"_______"		commits with a message
git status					lets you know the status
git diff					what's different
	$ git diff -- stat XXXXXXXXXXXXXXXXX changes made since a particular commit

git log 					all back-ups/comments log
	git log -p
	git log -1
	git log -2

git blame (file name)		tells who updated the file last, for blame
git clone (url)				makes a carbon copy, then can add files and commit them
git remote add origin (dest)   telling comp there is a remote area you want to draw from


git push					push changes to master
git pull					pull changes from master
forking						similar to git clone, modify independently without chaning
								the original repository.
	pull request			your changes to forked repo, make a pull request to the owner of
								original repo.  Owner will decide to accept changes.
git branch					see all branches that exist
								a * denotes which branch you are on
git branch <X> <old branch>	creates a branch off of the master banch.
							Create when: major changes, reset changes(you don't want to lose),
								work on a feature that may or may not be included.
	git checkout X 				allows you to work on the branch
git checkout -b <X>			create new branch and set it as current branch to work on
	
	ALWAYS COMMIT ALL CHANGES BEFORE ATTEMPTING A MERGE
		get merge X 				has you merge changes to branch master
										will have code <<---->> telling you conflicts and 
										recommendations to fix it for resolution


repository (Version Control Systems) is a bank.  text log is ledger with who and why changes

states			committed, modified, staged
	modified - changed file in working directory, but have not added it yet
	staged - marked a modified file to go to the staging area for next commit
	committed - Data is safely stored from the Staging Area into your 
				local .git Directory.

		Working Directory: A single checkout of the project. These files are pulled out of the compressed database in the Git Directory and placed on disk for you to use or modify.

		Staging Area: Is a simple file, generally contained in your Git directory, that stores information about what will go into your next commit -- basically an "index" of the staged files.

		Git Directory (Repository): Metadata & Object Database of the project (a compressed reference "skeleton" of the project). This is the essential part of Git -- it's what is copied when you clone a repository from GitHub or another computer.

git revert -n XXXX 			reverses all the changes made by the original commit
								start with the most recent and work backwords

git reset <commit hash> --hard		!! Only use to UTTERLY and COMPLETELY erase something
	git reset XXXXXXX --hard			Terrible for anything else


github
	make a repository
git remote add origin https://github.com/akulais/assignment1_demo.git
git push -u origin master